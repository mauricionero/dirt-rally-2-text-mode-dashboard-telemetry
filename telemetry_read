#!/usr/bin/python3

# reference: https://steamcommunity.com/app/310560/discussions/0/481115363869500839/?l=norwegian

# set udp connection as true and extra_params to 3
# ~/.local/share/Steam/steamapps/compatdata/690790/pfx/drive_c/users/steamuser/Documents/My Games/DiRT Rally 2.0/hardwaresettings
# /media/m2ssd/games/steam/steamapps/compatdata/690790/pfx/drive_c/users/steamuser/Documents/My Games/DiRT Rally 2.0/hardwaresettings

# for "normal" linux distro (not raspberry):
# https://github.com/allanbian1017/i2c-ch341-usb

##################
## CONFIGURATIONS

I2C_BUS = 10

HIGH_RPM_PERCENTAGE = 7
HIGH_RPM_PERCENTAGE_STEPS = 3

SEND_EVERY_X_PACKS = 2 # sending once every X packages received, reduce amount of data sent, more stability

SIMULATED_DATA = False # For debugging without real data (fake random data will be generated (with some order))
FAKE_DATA_INTERVAL = 0.05
MORE_RANDOM = False # Totally random data. Useful to test harsh transitions and limits in display

# VISUAL OFFSETS
DISTANCE_OFFSET = 0
RPM_V_OFFSET = DISTANCE_OFFSET + 1
SHIFT_LIGHT_V_OFFSET = RPM_V_OFFSET + 3
GEAR_V_OFFSET = RPM_V_OFFSET + 3
DEBUG_V_OFFSET = 5
BUTTONS_V_OFFSET = 0

INITIAL_SLEEP = 3 # seconds

## CONFIGURATIONS
##################

from mcp23017 import Mcp23017Driver
from ssd1306 import Ssd1306Driver

import socket
import time
import struct
import curses
import random
import sys
import psutil
import signal
import threading
from time import strftime
from time import gmtime

from smbus2 import SMBus
# import evdev

DIRT_IP = ""
DIRT_PORT = 20777
RESEND_PORT = 20778

# arguments
RESEND_INFOS = False
for arg in sys.argv:
	if arg == "-s": # server: resend infos in RESEND_PORT port
		RESEND_INFOS = True
	elif arg == "-d": # debug: simulate data, no real telemetry
		SIMULATED_DATA = True


class LanConnection:
	self_lan_ip = None
	
	# find self IP
	def self_ip():
		if LanConnection.self_lan_ip:
			return LanConnection.self_lan_ip
		
		s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		s.connect(("8.8.8.8", 80))
		LanConnection.self_lan_ip = s.getsockname()[0]
		s.close()
		return LanConnection.self_lan_ip


class TelemetryData:
	RUN_TIME = 0
	LAP_TIME = 1
	DISTANCE_DRIVEN_LAP = 2
	DISTANCE_DRIVEN_OVERALL = 3
	POSITION_X = 4
	POSITION_Y = 5
	POSITION_Z = 6
	SPEED_POS = 7
	PITCH_X = 14
	PITCH_Y = 15
	PITCH_Z = 16
	GEAR_POS = 33
	G_FORCE_LAT = 34
	G_FORCE_LON = 35
	RPM_POS = 37
	BREAK_TEMP_RL = 51
	BREAK_TEMP_RR = 52
	BREAK_TEMP_FL = 53
	BREAK_TEMP_FR = 54
	COMPLETED_LAPS = 59
	TOTAL_LAPS = 60
	TRACK_LENGTH_TOTAL = 61
	MAX_RPM_POS = 63
	IDLE_RPM_POS = 64
	MAX_GEARS_POS = 65

	byte_size = 4
	clear_state = True

	sock = None

	infos = []
	last_shift_light_states = []

	max_g_force_lat = 0
	max_g_force_lon = 0
	min_g_force_lat = 0
	min_g_force_lon = 0
	last_max_rpm = None
	rpm_shift_light = None
	rpm_shift_light_step = None

	def __init__(self):
		for _gpio_led in ShiftLightLeds.SHIFTLIGHT_LEDS:
			self.last_shift_light_states.append(None)

	def setup():
		TelemetryData.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		TelemetryData.sock.bind((DIRT_IP, DIRT_PORT))
		
	def read_data_position(data, pos):
		return data[pos:pos+TelemetryData.byte_size]

	def bit_stream_to_float32(data, pos):
		pos *= TelemetryData.byte_size
		try:
			value = struct.unpack('f', TelemetryData.read_data_position(data, pos))[0]
		except struct.error as _:
			value = 0
			# print('Failed to get data item at pos {}'.format(pos))
		except Exception as e:
			value = 0
			# print('Failed to get data item at pos {}. Make sure to set extradata=3 in the hardware settings.'.format(pos))
		return value

	def read_data():
		if SIMULATED_DATA:
			TelemetryData.infos = FakeData.generate_fake_data()
		else:
			data, addr = TelemetryData.sock.recvfrom(1024) # buffer size
			TelemetryData.infos = {
				"run_time": round(TelemetryData.bit_stream_to_float32(data, TelemetryData.RUN_TIME), 1),
				"lap_time": round(TelemetryData.bit_stream_to_float32(data, TelemetryData.LAP_TIME), 2),
				"speed": round(TelemetryData.bit_stream_to_float32(data, TelemetryData.SPEED_POS) * 3.6),
				"gear": int(TelemetryData.bit_stream_to_float32(data, TelemetryData.GEAR_POS)),
				"rpm": int(TelemetryData.bit_stream_to_float32(data, TelemetryData.RPM_POS)),
				"max_rpm": int(TelemetryData.bit_stream_to_float32(data, TelemetryData.MAX_RPM_POS)),
				"idle_rpm": int(TelemetryData.bit_stream_to_float32(data, TelemetryData.IDLE_RPM_POS)),
				"completed_laps": int(TelemetryData.bit_stream_to_float32(data, TelemetryData.COMPLETED_LAPS)),
				"total_laps": int(TelemetryData.bit_stream_to_float32(data, TelemetryData.TOTAL_LAPS)),
				"position_x": round(TelemetryData.bit_stream_to_float32(data, TelemetryData.POSITION_X), 3),
				"position_y": round(TelemetryData.bit_stream_to_float32(data, TelemetryData.POSITION_Y), 3),
				"position_z": round(TelemetryData.bit_stream_to_float32(data, TelemetryData.POSITION_Z), 3),
				"g_force_lat": round(TelemetryData.bit_stream_to_float32(data, TelemetryData.G_FORCE_LAT), 3),
				"g_force_lon": round(TelemetryData.bit_stream_to_float32(data, TelemetryData.G_FORCE_LON), 3),
				"distance_driven": round(TelemetryData.bit_stream_to_float32(data, TelemetryData.DISTANCE_DRIVEN_LAP) / 1000, 1),
				"track_length": round(TelemetryData.bit_stream_to_float32(data, TelemetryData.TRACK_LENGTH_TOTAL) / 1000, 1),
				'break_temp_rl': round(TelemetryData.bit_stream_to_float32(data, TelemetryData.BREAK_TEMP_RL)),
				'break_temp_rr': round(TelemetryData.bit_stream_to_float32(data, TelemetryData.BREAK_TEMP_RR)),
				'break_temp_fl': round(TelemetryData.bit_stream_to_float32(data, TelemetryData.BREAK_TEMP_FL)),
				'break_temp_fr': round(TelemetryData.bit_stream_to_float32(data, TelemetryData.BREAK_TEMP_FR)),
				"percent_distance": 0,
				"max_speed": 0
			}
			if TelemetryData.infos['rpm'] == 0:
				TelemetryData.infos['gear'] = -2
			TelemetryData.infos['percent_distance'] = 0 if TelemetryData.infos['track_length'] == 0 else int(TelemetryData.infos['distance_driven'] / TelemetryData.infos['track_length'] * 100)

		if RESEND_INFOS:
			Retransmit.send_info_socket(TelemetryData.infos)

		return TelemetryData.infos

	def recalculate_values(self):
		self.max_g_force_lat = 0
		self.max_g_force_lon = 0
		self.min_g_force_lat = 0
		self.min_g_force_lon = 0
		self.rpm_shift_light = int(self.infos['max_rpm'] - (self.infos['max_rpm'] * (HIGH_RPM_PERCENTAGE / 100)))
		self.rpm_shift_light_step = int(self.infos['max_rpm'] * (HIGH_RPM_PERCENTAGE_STEPS / 100))

	def shift_light(self):
		# if not racing
		if self.infos['rpm'] <= 0:
			# if already cleared
			if self.clear_state:
				return
			# if not cleared yet, clear
			else:
				ShiftLightLeds.clear_output()
				# mark as cleared
				self.clear_state = True
				return

		# if starts running and has a cleared state, unclear
		elif self.clear_state:
			self.clear_state = False

		step_count = 0
		for pin_position in ShiftLightLeds.SHIFTLIGHT_LEDS:
			this_rpm_shift_light_step = self.rpm_shift_light - (self.rpm_shift_light_step * (step_count - 1))
			this_shift_light_state = True if self.infos['rpm'] >= this_rpm_shift_light_step else False

			if this_shift_light_state != self.last_shift_light_states[step_count]:
				ShiftLightLeds.set_onoff(ShiftLightLeds.SHIFTLIGHT_LEDS[ShiftLightLeds.SHIFTLIGHT_LEDS_SIZE - step_count - 1], True if this_shift_light_state else False)
				self.last_shift_light_states[step_count] = this_shift_light_state
			step_count += 1


class Retransmit:
	ss = None
	cc = None
	addr = None
	resend_port = RESEND_PORT
	package_count_skip = 0

	def setup():
		if RESEND_INFOS:
			Retransmit.ss = socket.socket()
			try:
				Retransmit.ss.bind((LanConnection.self_ip(), Retransmit.resend_port))
			except:
				Retransmit.resend_port += 1
				Retransmit.ss.bind((LanConnection.self_ip(), Retransmit.resend_port))
			print("Configured connection to receive from:", LanConnection.self_ip(), ":", Retransmit.resend_port)
			Retransmit.ss.listen(2)
			try:
				Retransmit.cc, Retransmit.addr = Retransmit.ss.accept()
			except socket.timeout:
				pass
			print("Socket Up and running with a connection from ", Retransmit.addr)
			time.sleep(1)

	def send_info_socket(infos):
		if SEND_EVERY_X_PACKS != 0:
			if Retransmit.package_count_skip < SEND_EVERY_X_PACKS:
				Retransmit.package_count_skip += 1
				return
			Retransmit.package_count_skip = 0

		ret_data = [
			HIGH_RPM_PERCENTAGE,
			HIGH_RPM_PERCENTAGE_STEPS,
			infos['rpm'],
			infos['max_rpm'],
			infos['position_x'],
			infos['position_y'],
			infos['position_z'],
			infos['g_force_lat'],
			infos['g_force_lon'],
			infos['gear']
		]

		try:
			Retransmit.cc.send(struct.pack('<10f',*ret_data))
		except Exception as e:
			print(e)
			Retransmit.cc, Retransmit.addr = Retransmit.ss.accept()


class WindowDraw:
	LEFT = 0
	RIGHT = 1
	RPM_LOW_COLOR = 1
	RPM_COLOR = 2
	RPM_HIGH_COLOR = 3
	RPM_SUPER_HIGH_COLOR = 4
	BACKGROUND_COLOR = 5
	RPM_INFO_COLOR = 6
	GEAR_COLOR = 7
	BUTTON_COLOR = 8
	DISTANCE_COLOR = 9

	window = None
	gear_window = None
	rpm_window = None
	shiftlight_window = [None, None]
	buttons_window = None
	distance_window = None

	window_rows = 0
	window_cols = 0
	window_middle = 0
	rpm_info_size = 0
	rpm_idle_size = 0
	rpm_max_size = 0
	rpm_shift_light = 0
	rpm_shift_light_size = 0
	shift_light_h_size = 0
	shift_light_v_size = 0
	shift_light_h_begin = 0
	gear_h_size = 0
	gear_v_size = 0
	distance_h_size = 0

	def setup():
		WindowDraw.window = curses.initscr()
		WindowDraw.window.nodelay(True)
		curses.curs_set(0)
		WindowDraw.window.keypad(1)
		curses.mousemask(1)
		WindowDraw.window.clear()
		WindowDraw.window.refresh()
		WindowDraw.window_rows, WindowDraw.window_cols = WindowDraw.window.getmaxyx()
		WindowDraw.window_middle = int(WindowDraw.window_cols / 2)

		curses.start_color()
		curses.init_pair(WindowDraw.RPM_LOW_COLOR, curses.COLOR_BLUE, curses.COLOR_BLACK)
		curses.init_pair(WindowDraw.RPM_COLOR, curses.COLOR_GREEN, curses.COLOR_BLACK)
		curses.init_pair(WindowDraw.RPM_HIGH_COLOR, curses.COLOR_RED, curses.COLOR_BLACK)
		curses.init_pair(WindowDraw.RPM_SUPER_HIGH_COLOR, curses.COLOR_YELLOW, curses.COLOR_BLACK)
		curses.init_pair(WindowDraw.BACKGROUND_COLOR, curses.COLOR_BLACK, curses.COLOR_BLACK)
		curses.init_pair(WindowDraw.RPM_INFO_COLOR, curses.COLOR_WHITE, curses.COLOR_BLUE)
		curses.init_pair(WindowDraw.GEAR_COLOR, curses.COLOR_WHITE, curses.COLOR_BLACK)
		curses.init_pair(WindowDraw.BUTTON_COLOR, curses.COLOR_WHITE, curses.COLOR_BLACK)
		curses.init_pair(WindowDraw.DISTANCE_COLOR, curses.COLOR_YELLOW, curses.COLOR_BLACK)

	def recalculate_values(idle_rpm, max_rpm):
		if max_rpm == 0:
			max_rpm = 5000
		
		# if idle_rpm == 0:
		# 	idle_rpm = 1000

		WindowDraw.window_rows, WindowDraw.window_cols = WindowDraw.window.getmaxyx()
		window_middle = int(WindowDraw.window_cols / 2)

		WindowDraw.rpm_max_size = int(WindowDraw.rpm_info_size)
		WindowDraw.rpm_idle_size = int((idle_rpm / max_rpm) * WindowDraw.rpm_info_size)
		WindowDraw.rpm_shift_light = int(max_rpm - (max_rpm * (HIGH_RPM_PERCENTAGE / 100)))
		WindowDraw.rpm_shift_light_size = int(WindowDraw.rpm_max_size - (WindowDraw.rpm_max_size * (HIGH_RPM_PERCENTAGE / 100)))

	def draw_interface():
		try:
			# WindowDraw.draw_distance_bar()
			WindowDraw.draw_rpm_bar()
			WindowDraw.draw_gear_bar()
			WindowDraw.draw_shift_light_bar(WindowDraw.LEFT)
			WindowDraw.draw_shift_light_bar(WindowDraw.RIGHT)
			# draw_buttons()
		except curses.error:
			return

	def draw_buttons():
		button_h_size = 3
		button_v_size = 1
		button_v_spaces = 1

		buttons_v_size = (button_v_size * 2) + button_v_spaces + 2
		buttons_h_size = button_h_size + 2
		buttons_h_begin = WindowDraw.window_cols - buttons_h_size - 1

		WindowDraw.buttons_window = WindowDraw.window.subwin(buttons_v_size, buttons_h_size, BUTTONS_V_OFFSET, buttons_h_begin)
		WindowDraw.buttons_window.box()
		WindowDraw.buttons_window.addstr(1, 1, " ⬆️ ", curses.color_pair(BUTTON_COLOR) | curses.A_BOLD)
		WindowDraw.buttons_window.addstr(1 + button_v_size + button_v_spaces, 1, " ⬇️ ", curses.color_pair(BUTTON_COLOR) | curses.A_BOLD)
		
		WindowDraw.buttons_window.refresh()

	def button_interaction(mx, my):
		return ""

	def draw_gear_bar():
		WindowDraw.gear_v_size = 7
		WindowDraw.gear_h_size = 9

		gear_v_offset = WindowDraw.window_rows - GEAR_V_OFFSET - WindowDraw.gear_v_size

		gear_h_begin = int(WindowDraw.window_middle - (WindowDraw.gear_h_size / 2))

		WindowDraw.gear_window = WindowDraw.window.subwin(WindowDraw.gear_v_size, WindowDraw.gear_h_size, gear_v_offset, gear_h_begin)
		WindowDraw.gear_window.box()
		WindowDraw.gear_window.refresh()

	def print_gear(gear):
		h_offset = 2

		try:
			if gear == -1:
				WindowDraw.gear_window.addstr(1, h_offset, "┏━━━┓ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(2, h_offset, "┃   ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(3, h_offset, "┣━━━┛ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(4, h_offset, "┃  ╲  ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(5, h_offset, "      ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
			elif gear == 0:
				WindowDraw.gear_window.addstr(1, h_offset, "┏━━━┓ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(2, h_offset, "┃   ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(3, h_offset, "┃   ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(4, h_offset, "┃   ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(5, h_offset, "┗━━━┛ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
			elif gear == 1:
				WindowDraw.gear_window.addstr(1, h_offset, " ━┓   ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(2, h_offset, "  ┃   ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(3, h_offset, "  ┃   ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(4, h_offset, "  ┃   ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(5, h_offset, " ━┻━  ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
			elif gear == 2:
				WindowDraw.gear_window.addstr(1, h_offset, " ━━━┓ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(2, h_offset, "    ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(3, h_offset, "┏━━━┛ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(4, h_offset, "┃     ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(5, h_offset, "┗━━━  ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
			elif gear == 3:
				WindowDraw.gear_window.addstr(1, h_offset, " ━━━┓ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(2, h_offset, "    ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(3, h_offset, " ━━━┫ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(4, h_offset, "    ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(5, h_offset, " ━━━┛ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
			elif gear == 4:
				WindowDraw.gear_window.addstr(1, h_offset, "╻   ╻ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(2, h_offset, "┃   ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(3, h_offset, "┗━━━┫ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(4, h_offset, "    ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(5, h_offset, "    ╹ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
			elif gear == 5:
				WindowDraw.gear_window.addstr(1, h_offset, "┏━━━  ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(2, h_offset, "┃     ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(3, h_offset, "┗━━━┓ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(4, h_offset, "    ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(5, h_offset, " ━━━┛ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
			elif gear == 6 :
				WindowDraw.gear_window.addstr(1, h_offset, "┏━━━  ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(2, h_offset, "┃     ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(3, h_offset, "┣━━━┓ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(4, h_offset, "┃   ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(5, h_offset, "┗━━━┛ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
			elif gear == 7:
				WindowDraw.gear_window.addstr(1, h_offset, " ━━━┓ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(2, h_offset, "    ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(3, h_offset, "    ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(4, h_offset, "    ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(5, h_offset, "    ╹ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
			elif gear == 8:
				WindowDraw.gear_window.addstr(1, h_offset, "┏━━━┓ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(2, h_offset, "┃   ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(3, h_offset, "┣━━━┫ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(4, h_offset, "┃   ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(5, h_offset, "┗━━━┛ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
			elif gear == 9:
				WindowDraw.gear_window.addstr(1, h_offset, "┏━━━┓ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(2, h_offset, "┃   ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(3, h_offset, "┗━━━┫ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(4, h_offset, "    ┃ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(5, h_offset, "    ╹ ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
			else:
				WindowDraw.gear_window.addstr(1, h_offset, "      ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(2, h_offset, "      ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(3, h_offset, "      ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(4, h_offset, "      ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
				WindowDraw.gear_window.addstr(5, h_offset, "      ", curses.color_pair(WindowDraw.GEAR_COLOR) | curses.A_BOLD)
		except curses.error:
			return

	def draw_shift_light_bar(side):
		WindowDraw.shift_light_h_size = 5
		WindowDraw.shift_light_v_size = 6

		if side == WindowDraw.LEFT:
			WindowDraw.shift_light_h_begin = int(WindowDraw.window_middle - (WindowDraw.gear_h_size / 2) - WindowDraw.shift_light_h_size)
		else: # RIGHT
			WindowDraw.shift_light_h_begin = int(WindowDraw.window_middle + (WindowDraw.gear_h_size / 2))

		shift_light_v_offset = WindowDraw.window_rows - SHIFT_LIGHT_V_OFFSET - WindowDraw.shift_light_v_size

		WindowDraw.shiftlight_window[side] = WindowDraw.window.subwin(WindowDraw.shift_light_v_size, WindowDraw.shift_light_h_size, shift_light_v_offset, WindowDraw.shift_light_h_begin)
		WindowDraw.shiftlight_window[side].refresh()

	def print_shift_light(rpm):
		if rpm >= WindowDraw.rpm_shift_light:
			color = WindowDraw.RPM_HIGH_COLOR
			WindowDraw.shiftlight_window[WindowDraw.LEFT].bkgdset(curses.COLOR_RED)
			WindowDraw.shiftlight_window[WindowDraw.RIGHT].bkgdset(curses.COLOR_RED)
		else:
			color = WindowDraw.BACKGROUND_COLOR
			WindowDraw.shiftlight_window[WindowDraw.LEFT].bkgdset(curses.COLOR_BLACK)
			WindowDraw.shiftlight_window[WindowDraw.RIGHT].bkgdset(curses.COLOR_BLACK)

		try:
			for i in range(WindowDraw.shift_light_v_size-1):
				WindowDraw.shiftlight_window[WindowDraw.LEFT].addstr(i, 0, '█' * WindowDraw.shift_light_h_size, curses.color_pair(color))
				WindowDraw.shiftlight_window[WindowDraw.RIGHT].addstr(i, 0, '█' * WindowDraw.shift_light_h_size, curses.color_pair(color))
		except curses.error:
			return

	# def draw_distance_bar():
	# 	distance_h_begin = 1
	# 	distance_v_size = 1
		
	# 	distance_v_offset = WindowDraw.window_rows - distance_v_size - DISTANCE_OFFSET

	# 	WindowDraw.distance_h_size = WindowDraw.window_cols - 2

	# 	WindowDraw.distance_window = WindowDraw.window.subwin(distance_v_size, WindowDraw.distance_h_size, distance_v_offset, distance_h_begin)
	# 	WindowDraw.distance_window.refresh()

	def print_distance(_driven_distance, _track_length, percent_distance):
		distance_v_begin = WindowDraw.window_rows - DISTANCE_OFFSET - 1
		distance_h_begin = 0

		distance_size = int(WindowDraw.window_cols * percent_distance / 100)
		rest_distance = WindowDraw.window_cols - distance_size

		try:
			WindowDraw.window.addstr(distance_v_begin, distance_h_begin, '▓' * distance_size, curses.color_pair(WindowDraw.DISTANCE_COLOR))
			WindowDraw.window.addstr(distance_v_begin, distance_h_begin + distance_size, '─' * rest_distance, curses.color_pair(WindowDraw.DISTANCE_COLOR))
		except curses.error:
			return
		# WindowDraw.window.addstr(distance_v_begin, distance_h_begin, str(WindowDraw.distance_h_size), curses.color_pair(WindowDraw.RPM_COLOR))

	def draw_rpm_bar():
		rpm_h_begin = 1

		rpm_v_size = 3
		rpm_h_size = WindowDraw.window_cols - 4

		rpm_v_offset = WindowDraw.window_rows - rpm_v_size - RPM_V_OFFSET

		WindowDraw.rpm_window = WindowDraw.window.subwin(rpm_v_size, rpm_h_size, rpm_v_offset, rpm_h_begin)
		WindowDraw.rpm_window.box()

		# WindowDraw.rpm_window.addstr(1, 1, "   ", curses.color_pair(RPM_INFO_COLOR) | curses.A_BOLD)

		WindowDraw.rpm_window.refresh()

		WindowDraw.rpm_info_size = WindowDraw.window_cols - 6

	def print_rpm(rpm, max_rpm, idle_rpm):
		if max_rpm == 0:
			max_rpm = 5000

		rpm_size = int((rpm / max_rpm) * WindowDraw.rpm_info_size)
		fill_background = True

		rpm_info_v_begin = 1
		rpm_info_h_begin = 2

		try:
			if rpm <= idle_rpm:
				WindowDraw.rpm_window.addstr(rpm_info_v_begin, rpm_info_h_begin, '█' * rpm_size, curses.color_pair(WindowDraw.RPM_LOW_COLOR))
			else:
				WindowDraw.rpm_window.addstr(rpm_info_v_begin, rpm_info_h_begin, '█' * WindowDraw.rpm_idle_size, curses.color_pair(WindowDraw.RPM_LOW_COLOR))
				if rpm_size <= WindowDraw.rpm_shift_light_size:
					WindowDraw.rpm_window.addstr(rpm_info_v_begin, rpm_info_h_begin + WindowDraw.rpm_idle_size, '█' * (rpm_size - WindowDraw.rpm_idle_size), curses.color_pair(WindowDraw.RPM_COLOR))
				else:
					WindowDraw.rpm_window.addstr(rpm_info_v_begin, rpm_info_h_begin + WindowDraw.rpm_idle_size, '█' * (WindowDraw.rpm_shift_light_size - WindowDraw.rpm_idle_size), curses.color_pair(WindowDraw.RPM_COLOR))
					if rpm_size <= WindowDraw.rpm_max_size:
						WindowDraw.rpm_window.addstr(rpm_info_v_begin, rpm_info_h_begin + WindowDraw.rpm_shift_light_size, '█' * (rpm_size - WindowDraw.rpm_shift_light_size), curses.color_pair(WindowDraw.RPM_HIGH_COLOR))
					else: # super high RPM
						fill_background = False
						WindowDraw.rpm_window.addstr(rpm_info_v_begin, rpm_info_h_begin + WindowDraw.rpm_shift_light_size, '█' * (WindowDraw.rpm_max_size - WindowDraw.rpm_shift_light_size + 1), curses.color_pair(WindowDraw.RPM_HIGH_COLOR))
						WindowDraw.rpm_window.addstr(rpm_info_v_begin, rpm_info_h_begin + WindowDraw.rpm_max_size, '█' * 1, curses.color_pair(WindowDraw.RPM_SUPER_HIGH_COLOR))

			if fill_background:
				WindowDraw.rpm_window.addstr(rpm_info_v_begin, rpm_info_h_begin + rpm_size, '█' * (WindowDraw.rpm_max_size - rpm_size + 1), curses.color_pair(WindowDraw.BACKGROUND_COLOR))
		except curses.error:
			return

	def debug(infos):
		debug_v_size = 4
		debug_h_begin = 3
		debug_v_begin = WindowDraw.window_rows - RPM_V_OFFSET - 4 - debug_v_size

		lap_time = str(infos['lap_time']).split('.')
		best_lap_time = str(infos['best_lap_time']).split('.')

		lap_sep = ' | ' if len(lap_time[1]) == 1 else '| '

		speed_info =     "speed: " + str(infos["speed"]) +     " Km/h  "
		max_speed_info = "  max: " + str(infos["max_speed"]) + " Km/h  "
		lap_info =       "  lap: " + strftime("%M:%S", gmtime(int(lap_time[0]))) + "." + lap_time[1] + lap_sep + str(infos['completed_laps']) + " / " + str(infos['total_laps']) + "  "
		best_lap_info =  " best: " + strftime("%M:%S", gmtime(int(best_lap_time[0]))) + "." + best_lap_time[1] + "   "
		distance_info =  "dist.: " + str(infos["distance_driven"]) + " / " + str(infos["track_length"]) + " | " + str(infos['percent_distance']) + "%  "

		try:
			WindowDraw.window.addstr(debug_v_begin + 0, debug_h_begin, speed_info, curses.color_pair(WindowDraw.GEAR_COLOR))
			WindowDraw.window.addstr(debug_v_begin + 1, debug_h_begin, max_speed_info, curses.color_pair(WindowDraw.GEAR_COLOR))
			WindowDraw.window.addstr(debug_v_begin + 2, debug_h_begin, lap_info, curses.color_pair(WindowDraw.GEAR_COLOR))
			WindowDraw.window.addstr(debug_v_begin + 3, debug_h_begin, best_lap_info, curses.color_pair(WindowDraw.GEAR_COLOR))
			WindowDraw.window.addstr(debug_v_begin + 4, debug_h_begin, distance_info, curses.color_pair(WindowDraw.GEAR_COLOR))

		except curses.error:
			return


class FakeData:
	start_time = time.time()
	max_fake_gears = 7
	max_fake_speed = 300
	min_fake_speed = (max_fake_speed / 10) * -1
	speed_by_gear = max_fake_speed / max_fake_gears
	max_rpm_variation = 100
	completed_laps = 0
	distance_driven = 0
	track_length = random.randrange(3000, 30000, 100)
	last_data = {
		"run_time": 0.0,
		"lap_time": 0,
		"speed": 0,
		"gear": 0,
		"rpm": 900,
		"max_rpm": 7000,
		"idle_rpm": 900,
		"completed_laps": 0,
		"total_laps": random.choice([0, 1, 2, 3, 4, 5]),
		"position_x": 0.0,
		"position_y": 0.0,
		"position_z": 0.0,
		"g_force_lat": 0.0,
		"g_force_lon": 0.0,
		"speed_x": 0,
		"speed_y": 0,
		"distance_driven": 0,
		"track_length": 0,
		"percent_distance": 0,
		"break_temp_rl": -5,
		"break_temp_rr": -150,
		"break_temp_fl": 200,
		"break_temp_fr": 50
	}
		
	def generate_fake_data():
		time.sleep(FAKE_DATA_INTERVAL)
		delta_speed = random.choice([-2, -1, 0, 1, 2])
		speed = FakeData.last_data['speed'] + delta_speed

		if random.randrange(1, 40, 1) == 1:
			FakeData.completed_laps = FakeData.last_data['completed_laps'] + 1
			FakeData.start_time = time.time()

		run_time = time.time() - FakeData.start_time

		# speed adjust
		if speed >= FakeData.max_fake_speed * 2 / 3:
			speed -= 1
		elif speed <= FakeData.max_fake_speed / 10:
			speed += 1
		if speed > FakeData.max_fake_speed:
			speed = FakeData.max_fake_speed
		elif speed < FakeData.min_fake_speed:
			speed = FakeData.min_fake_speed
		
		# gear adjust
		if MORE_RANDOM:
			gear = random.randrange(-1, 10)
		else:
			if speed < 0:
				gear = 0 if FakeData.last_data['gear'] >= 1 else -1
			else:
				gear = 0 if FakeData.last_data['gear'] < 0 else round(speed / FakeData.speed_by_gear)
		
		# rpm adjust
		rpm = ((speed % FakeData.speed_by_gear) / FakeData.speed_by_gear) * (FakeData.last_data['max_rpm'] - FakeData.last_data['idle_rpm']) + FakeData.last_data['idle_rpm']
		if rpm + FakeData.max_rpm_variation > FakeData.last_data['rpm']:
			rpm = FakeData.last_data['rpm'] + FakeData.max_rpm_variation
		elif rpm - FakeData.max_rpm_variation < FakeData.last_data['rpm']: 
			rpm = FakeData.last_data['rpm'] - FakeData.max_rpm_variation
		
		# lap adjust
		if FakeData.completed_laps > FakeData.last_data['total_laps']:
			FakeData.completed_laps = 0
		
		# position
		delta_x = delta_speed * random.uniform(0, 1)
		position_x = FakeData.last_data['position_x'] + delta_x
		position_y = FakeData.last_data['position_y'] + random.choice([-0.003, -0.002, -0.001, -0.001, 0, 0, 0, 0.01, 0.001, 0.002, 0.003])
		position_z = FakeData.last_data['position_z'] + delta_speed - delta_x

		# g forces
		g_force_lat = random.uniform(0, 1)/10
		g_force_lon = random.uniform(0, 1)/10

		# distances
		FakeData.distance_driven += random.randrange(0, 10, 1)
		if FakeData.distance_driven > FakeData.track_length:
			FakeData.track_length = random.randrange(3000, 30000, 100)
			FakeData.distance_driven = 0
		
		# break temperatures
		normal_temp = 40
		break_temp_fl = FakeData.last_data['break_temp_fl'] + random.randrange(-2, 6, 1) + ((FakeData.last_data['break_temp_fl'] - normal_temp) / 10 * -1)
		break_temp_fr = FakeData.last_data['break_temp_fr'] + random.randrange(-2, 6, 1) + ((FakeData.last_data['break_temp_fr'] - normal_temp) / 10 * -1)
		break_temp_rl = FakeData.last_data['break_temp_rl'] + random.randrange(-2, 4, 1) + ((FakeData.last_data['break_temp_rl'] - normal_temp) / 10 * -1)
		break_temp_rr = FakeData.last_data['break_temp_rr'] + random.randrange(-2, 4, 1) + ((FakeData.last_data['break_temp_rr'] - normal_temp) / 10 * -1)
		
		percent_distance = 0 if FakeData.track_length == 0 else int(FakeData.distance_driven / FakeData.track_length * 100)
		
		FakeData.last_data = {
			"run_time": round(run_time, 1),
			"lap_time": round(run_time, 1),
			"speed": speed,
			"gear": gear,
			"rpm": int(rpm),
			"max_rpm": FakeData.last_data['max_rpm'],
			"idle_rpm": FakeData.last_data['idle_rpm'],
			"completed_laps": FakeData.completed_laps,
			"total_laps": FakeData.last_data['total_laps'],
			"position_x": position_x,
			"position_y": position_y,
			"position_z": position_z,
			"g_force_lat": g_force_lat,
			"g_force_lon": g_force_lon,
			"track_length": round(FakeData.track_length / 1000.0, 1),
			"distance_driven": round(FakeData.distance_driven / 1000.0, 1),
			"percent_distance": percent_distance,
			"break_temp_rl": int(break_temp_rl),
			"break_temp_rr": int(break_temp_rr),
			"break_temp_fl": int(break_temp_fl),
			"break_temp_fr": int(break_temp_fr)
		}

		return FakeData.last_data


class MiniDisplay:
	ADDRESS = 0x3C

	FRAMES_DELAY = 6

	RPM_PAGE = 0
	SPEED_PAGE = 1 # -> 2
	TIRE_PAGE = 4
	TRACK_PAGE = 7

	ssd = None

	rpm_shift_light = None
	rpm_shift_light_step = None

	last_shiftlight_state = None
	last_speed = -1
	last_driven_distance = -1
	last_driven_percent = -1
	flickr_delay = 0
	speed_frames_delay = 0

	def setup(smBus = None):
		if smBus == None:
			smBus = SMBus(I2C_BUS)
		MiniDisplay.ssd = Ssd1306Driver(smBus, address=MiniDisplay.ADDRESS)

		MiniDisplay.ssd.set_multiplex_ratio()
		MiniDisplay.ssd.set_display_offset()
		MiniDisplay.ssd.set_start_line()
		MiniDisplay.ssd.set_left_right(False)
		MiniDisplay.ssd.set_top_bottom(False)
		MiniDisplay.ssd.set_com_pin_conf()
		MiniDisplay.ssd.set_contrast()
		MiniDisplay.ssd.set_display_ram_content()
		MiniDisplay.ssd.set_display_mode()
		MiniDisplay.ssd.set_clock()
		MiniDisplay.ssd.set_charge_pump()
		MiniDisplay.ssd.set_page_addr_mode()

		MiniDisplay.turn_on()

		MiniDisplay.ssd.reset_cursor()
	
	def recalculate_values(max_rpm):
		MiniDisplay.rpm_shift_light = int(max_rpm - (max_rpm * (HIGH_RPM_PERCENTAGE / 100)))
		MiniDisplay.rpm_shift_light_step = int(max_rpm * (HIGH_RPM_PERCENTAGE_STEPS / 100))

	def hello():
		MiniDisplay.ssd.fill_screen()
		time.sleep(0.6)
		MiniDisplay.ssd.clear_screen()
	
	def turn_on():
		MiniDisplay.ssd.display_on()
	
	def turn_off():
		MiniDisplay.ssd.display_off()
	
	def clear_screen():
		MiniDisplay.ssd.clear_screen()
	
	def draw_background():
		MiniDisplay.ssd.write_screen(MiniDisplay.RPM_PAGE, 'RPM', 0, 19)
		MiniDisplay.set_rpm(10, 1000)
		# speed
		MiniDisplay.ssd.icon_screen(MiniDisplay.SPEED_PAGE, 'speed', 34)
		MiniDisplay.ssd.write_screen(MiniDisplay.SPEED_PAGE+1, "Km/h", 34, 20)
		# max speed
		MiniDisplay.ssd.icon_screen(MiniDisplay.SPEED_PAGE, 'maxspeed', 97)
		MiniDisplay.ssd.write_screen(MiniDisplay.SPEED_PAGE+1, "Km/h", 97, 20)
		# distance
		MiniDisplay.ssd.horizontal_bar(MiniDisplay.TRACK_PAGE, 35, 60, 0.02)
		MiniDisplay.ssd.write_screen(MiniDisplay.TRACK_PAGE, "Km", 22, 10)
		MiniDisplay.ssd.write_screen(MiniDisplay.TRACK_PAGE, "Km", 117, 10)
		# tires
		MiniDisplay.ssd.horizontal_bar(MiniDisplay.TIRE_PAGE, MiniDisplay.tire_display_position[0][2], 8, 1)
		MiniDisplay.ssd.horizontal_bar(MiniDisplay.TIRE_PAGE, MiniDisplay.tire_display_position[1][2], 8, 1)
		MiniDisplay.ssd.horizontal_bar(MiniDisplay.TIRE_PAGE+1, MiniDisplay.tire_display_position[2][2], 8, 1)
		MiniDisplay.ssd.horizontal_bar(MiniDisplay.TIRE_PAGE+1, MiniDisplay.tire_display_position[3][2], 8, 1)
		
		MiniDisplay.ssd.horizontal_bar(MiniDisplay.TIRE_PAGE, MiniDisplay.tire_display_position[0][2], 8, 0)
		MiniDisplay.ssd.horizontal_bar(MiniDisplay.TIRE_PAGE, MiniDisplay.tire_display_position[1][2], 8, 0)
		MiniDisplay.ssd.horizontal_bar(MiniDisplay.TIRE_PAGE+1, MiniDisplay.tire_display_position[2][2], 8, 0)
		MiniDisplay.ssd.horizontal_bar(MiniDisplay.TIRE_PAGE+1, MiniDisplay.tire_display_position[3][2], 8, 0)
		# MiniDisplay.ssd.write_screen(MiniDisplay.TIRE_PAGE, "**", 88, 10)
		# MiniDisplay.ssd.write_screen(MiniDisplay.TIRE_PAGE+1, "**", 88, 10)
	
	def set_rpm(rpm, max_rpm):
		if max_rpm <= 0:
			max_rpm = 1000
			rpm = 10
		MiniDisplay.ssd.horizontal_bar(MiniDisplay.RPM_PAGE, 18, 109, rpm/max_rpm)
	
	def set_speed(speed, force = False):
		if not force and MiniDisplay.speed_frames_delay < MiniDisplay.FRAMES_DELAY + 2:
			MiniDisplay.speed_frames_delay += 1
		elif speed != MiniDisplay.last_speed:
			MiniDisplay.ssd.write_screen(MiniDisplay.SPEED_PAGE, "{:3d}".format(speed), 1, 33, 13, 'b')
			MiniDisplay.last_speed = speed
			MiniDisplay.speed_frames_delay = 0
	
	tire_skip_process_count = 0
	last_tire_temp = [0, 0, 0, 0]
	tire_display_position = [
		[TIRE_PAGE, 60, 82], [TIRE_PAGE, 104, 93],
		[TIRE_PAGE + 1, 60, 82], [TIRE_PAGE + 1, 104, 93]
	]
	tire_frames_delay = [0, 0, 0, 0]
	max_break_temp = 300
	def set_tires(break_temp_fl, break_temp_fr, break_temp_rl, break_temp_rr):
		if MiniDisplay.tire_skip_process_count < 2:
			MiniDisplay.tire_skip_process_count += 1
			return
		else:
			MiniDisplay.tire_skip_process_count = 0
		
		for i, tire_temp in enumerate([break_temp_fl, break_temp_fr, break_temp_rl, break_temp_rr]):
			if MiniDisplay.tire_frames_delay[i] < MiniDisplay.FRAMES_DELAY + 5:
				MiniDisplay.tire_frames_delay[i] += 1
			elif MiniDisplay.last_tire_temp[i] != tire_temp:
				if i % 2 == 1:
					d_tire_temp = str(tire_temp).ljust(4,' ')
				else:
					d_tire_temp = "{:4d}".format(tire_temp)
				MiniDisplay.ssd.write_screen(MiniDisplay.tire_display_position[i][0], d_tire_temp, MiniDisplay.tire_display_position[i][1], 21)
				MiniDisplay.ssd.horizontal_bar(MiniDisplay.tire_display_position[i][0], MiniDisplay.tire_display_position[i][2], 8, tire_temp/MiniDisplay.max_break_temp)
				MiniDisplay.last_tire_temp[i] = tire_temp
				MiniDisplay.tire_frames_delay[i] = 0
	
	def set_track_length(track_length):
		MiniDisplay.ssd.write_screen(MiniDisplay.TRACK_PAGE, str(track_length), 96, 20)
	
	def set_distance(driven_distance, percent_distance):
		if MiniDisplay.last_driven_distance != driven_distance:
			MiniDisplay.ssd.write_screen(MiniDisplay.TRACK_PAGE, str(driven_distance), 1, 22)
			MiniDisplay.last_driven_distance = driven_distance
		if MiniDisplay.last_driven_percent != percent_distance:
			MiniDisplay.ssd.horizontal_bar(MiniDisplay.TRACK_PAGE, 35, 60, percent_distance/100)
			MiniDisplay.last_driven_percent = percent_distance
	
	max_speed_frames_delay = 0
	last_max_speed = -1
	pending_max_speed = False
	def set_max_speed(speed, reset = False):
		if reset:
			MiniDisplay.last_max_speed = -1
		
		if speed > MiniDisplay.last_max_speed:
			MiniDisplay.last_max_speed = speed
			MiniDisplay.pending_max_speed = True
		
		if MiniDisplay.pending_max_speed:
			if MiniDisplay.max_speed_frames_delay < MiniDisplay.FRAMES_DELAY:
				MiniDisplay.max_speed_frames_delay += 1
				return
			else:
				MiniDisplay.max_speed_frames_delay = 0
			MiniDisplay.ssd.write_screen(MiniDisplay.SPEED_PAGE, "{:3d}".format(MiniDisplay.last_max_speed), 64, 33, 13, 'b')
			MiniDisplay.pending_max_speed = False
	
	def set_shiftlight(rpm):
		shiftlight_state = False

		if rpm >= MiniDisplay.rpm_shift_light + (MiniDisplay.rpm_shift_light_step * 2):
			if MiniDisplay.flickr_delay < MiniDisplay.FRAMES_DELAY:
				shiftlight_state = MiniDisplay.last_shiftlight_state
				MiniDisplay.flickr_delay += 1
			elif MiniDisplay.last_shiftlight_state != True:
				shiftlight_state = True
				MiniDisplay.flickr_delay = 0
			else:
				shiftlight_state = False
				MiniDisplay.flickr_delay = 0
		elif rpm >= MiniDisplay.rpm_shift_light + MiniDisplay.rpm_shift_light_step:
			shiftlight_state = True
			MiniDisplay.flickr_delay = 0
		else:
			MiniDisplay.flickr_delay = 0
		
		if shiftlight_state != MiniDisplay.last_shiftlight_state:
			MiniDisplay.ssd.set_display_mode(shiftlight_state)
		
		MiniDisplay.last_shiftlight_state = shiftlight_state

# multi port
class Mcp23017Calls:
	ADDRESS = 0x20
	# 0 to 7 for the GPIOA0...GPIOA7, 8 to 15 for the GPIOB0...GPIOB7
	GPIOA = [0, 1, 2, 3, 4, 5, 6, 7]
	GPIOB = [8, 9, 10, 11, 12, 13, 14, 15]
	# reference:
	# https://learn.adafruit.com/adafruit-mcp23017-i2c-gpio-expander/python-circuitpython

	mcp = None

	def setup(smBus = None):
		# Specify the new address with a keyword parameter if you set any of the A0, A1, A2
		# mcp = MCP23017(smBus, address=0x20)  # MCP23017 w/ A0 set
		# For the MCP23017 you specify a pin number from
		# 0 to 7 for the GPIOA0...GPIOA7, 8 to 15 for the GPIOB0...GPIOB7 pins (i.e. pin 12 is GPIOB4)
		if smBus == None:
			smBus = SMBus(I2C_BUS)
		Mcp23017Calls.mcp = Mcp23017Driver(smBus, address=Mcp23017Calls.ADDRESS)
	
	def set_pin(position, set_output = True, dont_sync = False):
		Mcp23017Calls.mcp.switch_to_output(position=position, set_output=set_output, dont_sync=dont_sync)
	
	def test_all(value = True):
		for position in range(16): # 0..15
			Mcp23017Calls.set_pin(position, dont_sync=True) # sync later all at once
			Mcp23017Calls.mcp.set_pin_value(position, value, dont_sync=True) # sync later all at once
		Mcp23017Calls.mcp.sync_data()
	
	def output(position, value = True, dont_sync = False):
		Mcp23017Calls.mcp.set_pin_value(position, value, dont_sync)
	
	def blink(position, sleep_time):
		Mcp23017Calls.mcp.set_pin_value(position, value=True)
		time.sleep(sleep_time)
		Mcp23017Calls.mcp.set_pin_value(position, value=False)
	
	def inverted_blink(position, sleep_time):
		Mcp23017Calls.mcp.set_pin_value(position, value=False)
		time.sleep(sleep_time)
		Mcp23017Calls.mcp.set_pin_value(position, value=True)
	
	def sync_data():
		Mcp23017Calls.mcp.sync_data()


class ShiftLightLeds:
	GREEN_LED_1 = Mcp23017Calls.GPIOA[7]
	YELLOW_LED_1 = Mcp23017Calls.GPIOA[6]
	YELLOW_LED_2 = Mcp23017Calls.GPIOA[5]
	RED_LED_1 = Mcp23017Calls.GPIOA[4] # high RPM, main shift light
	RED_LED_2 = Mcp23017Calls.GPIOA[3] # very high RPM
	SHIFTLIGHT_LEDS = [GREEN_LED_1, YELLOW_LED_1, YELLOW_LED_2, RED_LED_1, RED_LED_2]
	SHIFTLIGHT_LEDS_SIZE = len(SHIFTLIGHT_LEDS)

	def setup():
		for pin_position in ShiftLightLeds.SHIFTLIGHT_LEDS:
			Mcp23017Calls.set_pin(pin_position, set_output=True, dont_sync=True)
		Mcp23017Calls.sync_data()

	def clear_output():
		for pin_position in ShiftLightLeds.SHIFTLIGHT_LEDS:
			Mcp23017Calls.output(pin_position, value=False, dont_sync=True)
		Mcp23017Calls.sync_data()
	
	def set_onoff(pin_position, value = True):
		Mcp23017Calls.output(pin_position, value)
	
	def blink(pin_position, sleep_time):
		Mcp23017Calls.blink(pin_position, sleep_time)
	
	def inverted_blink(pin_position, sleep_time):
		Mcp23017Calls.inverted_blink(pin_position, sleep_time)
	
	def test_all(value = True):
		for pin_position in ShiftLightLeds.SHIFTLIGHT_LEDS:
			Mcp23017Calls.output(pin_position, value, dont_sync=True)
		Mcp23017Calls.sync_data()

	def hello():
		for pin_position in ShiftLightLeds.SHIFTLIGHT_LEDS:
			ShiftLightLeds.set_onoff(pin_position, True)
			time.sleep(0.1)
		
		for _ in range(5):
			ShiftLightLeds.set_onoff(ShiftLightLeds.RED_LED_2, False)
			time.sleep(0.06)
			ShiftLightLeds.set_onoff(ShiftLightLeds.RED_LED_2, True)
			time.sleep(0.04)
		
		time.sleep(0.5)

		for pin_position in reversed(ShiftLightLeds.SHIFTLIGHT_LEDS):
			ShiftLightLeds.set_onoff(pin_position, False)
			time.sleep(0.1)


class Display7Segments:
	# top connections:
	CAT_G = Mcp23017Calls.GPIOB[4]
	CAT_F = Mcp23017Calls.GPIOB[5]
	CAT_A = Mcp23017Calls.GPIOB[6]
	CAT_B = Mcp23017Calls.GPIOB[7]
	# bottom connections:
	CAT_E = Mcp23017Calls.GPIOB[3]
	CAT_D = Mcp23017Calls.GPIOB[2]
	CAT_C = Mcp23017Calls.GPIOB[1]
	CAT_H = Mcp23017Calls.GPIOB[0] # dot
	#   A
	# F   B
	#   G
	# E   C
	#   D  H 

	GEAR_LEDS = [CAT_A, CAT_B, CAT_C, CAT_D, CAT_E, CAT_F, CAT_G, CAT_H]

	def setup():
		for pin_position in Display7Segments.GEAR_LEDS:
			Mcp23017Calls.set_pin(pin_position, set_output=True, dont_sync=True)
		Mcp23017Calls.sync_data()
	
	def clear_output():
		for pin_position in Display7Segments.GEAR_LEDS:
			Mcp23017Calls.output(pin_position, value=False, dont_sync=True)
		Mcp23017Calls.sync_data()
	
	def test_all(value = True):
		for pin_position in Display7Segments.GEAR_LEDS:
			Mcp23017Calls.output(pin_position, value, dont_sync=True)
		Mcp23017Calls.sync_data()
	
	def set_segment(pin_position, value, dont_sync = False):
		Mcp23017Calls.output(pin_position, value, dont_sync)
	
	@classmethod
	def set_gear(cls, gear = None):
		segments = {
			'on': [],
			'off': [cls.CAT_A, cls.CAT_B, cls.CAT_C, cls.CAT_D, cls.CAT_E, cls.CAT_F, cls.CAT_G, cls.CAT_H]
		}

		if gear == -1:
			segments = {
				'on': [cls.CAT_B, cls.CAT_C, cls.CAT_G],
				'off': [cls.CAT_A, cls.CAT_D, cls.CAT_E, cls.CAT_F, cls.CAT_H]
			}
		elif gear == 0:
			segments = {
				'on': [cls.CAT_A, cls.CAT_B, cls.CAT_C, cls.CAT_D, cls.CAT_E, cls.CAT_F],
				'off': [cls.CAT_G, cls.CAT_H]
			}
		elif gear == 1:
			segments = {
				'on': [cls.CAT_B, cls.CAT_C],
				'off': [cls.CAT_A, cls.CAT_D, cls.CAT_E, cls.CAT_F, cls.CAT_G, cls.CAT_H]
			}
		elif gear == 2:
			segments = {
				'on': [cls.CAT_A, cls.CAT_B, cls.CAT_G, cls.CAT_E, cls.CAT_D],
				'off': [cls.CAT_C, cls.CAT_F, cls.CAT_H]
			}
		elif gear == 3:
			segments = {
				'on': [cls.CAT_A, cls.CAT_B, cls.CAT_C, cls.CAT_D, cls.CAT_G],
				'off': [cls.CAT_E, cls.CAT_F, cls.CAT_H]
			}
		elif gear == 4:
			segments = {
				'on': [cls.CAT_F, cls.CAT_G, cls.CAT_B, cls.CAT_C],
				'off': [cls.CAT_A, cls.CAT_D, cls.CAT_E, cls.CAT_H]
			}
		elif gear == 5:
			segments = {
				'on': [cls.CAT_A, cls.CAT_F, cls.CAT_G, cls.CAT_C, cls.CAT_D],
				'off': [cls.CAT_B, cls.CAT_E, cls.CAT_H]
			}
		elif gear == 6:
			segments = {
				'on': [cls.CAT_A, cls.CAT_F, cls.CAT_G, cls.CAT_C, cls.CAT_D, cls.CAT_E],
				'off': [cls.CAT_B, cls.CAT_H]
			}
		elif gear == 7:
			segments = {
				'on': [cls.CAT_A, cls.CAT_B, cls.CAT_C],
				'off': [cls.CAT_D, cls.CAT_E, cls.CAT_F, cls.CAT_G, cls.CAT_H]
			}
		elif gear == 8:
			segments = {
				'on': [cls.CAT_A, cls.CAT_B, cls.CAT_C, cls.CAT_D, cls.CAT_E, cls.CAT_F, cls.CAT_G],
				'off': [cls.CAT_H]
			}
		elif gear == 9:
			segments = {
				'on': [cls.CAT_A, cls.CAT_B, cls.CAT_C, cls.CAT_F, cls.CAT_G],
				'off': [cls.CAT_D, cls.CAT_E, cls.CAT_H]
			}

		for segment in segments['off']:
			Display7Segments.set_segment(segment, False, dont_sync=True)
		for segment in segments['on']:
			Display7Segments.set_segment(segment, True, dont_sync=True)
		Mcp23017Calls.sync_data()

	def hello():
		for gear in range(-1, 10):
			Display7Segments.set_gear(gear)
			time.sleep(0.15)
		Display7Segments.set_gear()


def main():
	TelemetryData.setup()
	Retransmit.setup()

	smBus = SMBus(I2C_BUS)

	Mcp23017Calls.setup(smBus)
	MiniDisplay.setup(smBus)
	
	ShiftLightLeds.setup()
	Display7Segments.setup()
	threading.Thread(target=ShiftLightLeds.hello).start()
	threading.Thread(target=Display7Segments.hello).start()
	threading.Thread(target=MiniDisplay.hello).start()

	time.sleep(INITIAL_SLEEP)
	
	WindowDraw.setup()
	WindowDraw.draw_interface()
	MiniDisplay.draw_background()
	last_gear = None
	last_max_rpm = None
	last_max_speed = 0
	best_lap_time = 0.00
	last_lap_time = 0.00
	last_completed_laps = 0

	mx = 0
	my = 0
	mz = 0

	# skip_frame_count = 0

	telemetry = TelemetryData()
	while True:
		infos = TelemetryData.read_data()

		# # small optimization, process only every 2 data received
		# skip_frame_count += 1
		# if skip_frame_count % 2 == 0:
		# 	skip_frame_count = 0
		# else:
		# 	next

		# event = WindowDraw.window.getch()
		# if event == curses.KEY_MOUSE:
		# 	_id, mx, my, _mz, _bstate = curses.getmouse()
		# 	button_interaction(mx, my)

		position = 0

		resized = curses.is_term_resized(WindowDraw.window_rows, WindowDraw.window_cols)
		if resized:
			WindowDraw.recalculate_values(infos['idle_rpm'], infos['max_rpm'])
			WindowDraw.draw_interface()
			MiniDisplay.recalculate_values(infos['max_rpm'])

		if last_max_rpm != infos['max_rpm'] or WindowDraw.rpm_max_size == 0:
			WindowDraw.recalculate_values(infos['idle_rpm'], infos['max_rpm'])
			MiniDisplay.recalculate_values(infos['max_rpm'])
			MiniDisplay.set_speed(0, True)
			last_max_rpm = infos['max_rpm']
			last_lap_time = 0
			Display7Segments.set_gear()
			telemetry.recalculate_values()
			# new race
			if infos['max_rpm'] != 0:
				last_max_speed = 0
				best_lap_time = 0.00
				last_completed_laps = 0
				MiniDisplay.set_max_speed(0, True)
				MiniDisplay.set_track_length(infos['track_length'])

		telemetry.shift_light()
		WindowDraw.print_shift_light(infos['rpm'])

		WindowDraw.print_rpm(infos['rpm'], infos['max_rpm'], infos['idle_rpm'])
		WindowDraw.rpm_window.refresh()
		WindowDraw.shiftlight_window[WindowDraw.LEFT].refresh()
		WindowDraw.shiftlight_window[WindowDraw.RIGHT].refresh()

		MiniDisplay.set_shiftlight(infos['rpm'])
		MiniDisplay.set_rpm(infos['rpm'], infos['max_rpm'])

		WindowDraw.print_distance(infos['distance_driven'], infos['track_length'], infos['percent_distance'])
		
		if infos['gear'] != last_gear:
			WindowDraw.print_gear(infos['gear'])
			WindowDraw.gear_window.refresh()
			last_gear = infos['gear']
			Display7Segments.set_gear(infos['gear'])
		
		if last_max_speed < infos['speed']:
			last_max_speed = infos['speed']
			MiniDisplay.set_max_speed(infos['speed'])
		infos['max_speed'] = last_max_speed

		MiniDisplay.set_speed(infos['speed'])
		MiniDisplay.set_distance(infos['distance_driven'], infos['percent_distance'])
		MiniDisplay.set_tires(infos['break_temp_fl'], infos['break_temp_fr'], infos['break_temp_rl'], infos['break_temp_rr'])

		# first lap
		if infos['completed_laps'] == 0 and infos['lap_time'] > 0:
			best_lap_time = infos['lap_time']
		# one more lap
		elif infos['lap_time'] < last_lap_time:
			# check if it was smaller
			if last_lap_time < best_lap_time:
				best_lap_time = last_lap_time
			last_completed_laps = infos['completed_laps']
		last_lap_time = infos['lap_time']

		infos['best_lap_time'] = best_lap_time

		WindowDraw.debug(infos)

		WindowDraw.window.addstr(0, 0, '')
		WindowDraw.window.refresh()


def exit_gracefully(*args):
	ShiftLightLeds.clear_output()
	Display7Segments.clear_output()
	MiniDisplay.turn_off()
	TelemetryData.sock.close()
	if Retransmit.ss != None:
		Retransmit.ss.close()
	exit(0)

if __name__ == '__main__':
	for sig in (signal.SIGABRT, signal.SIGILL, signal.SIGINT, signal.SIGSEGV, signal.SIGTERM):
		signal.signal(sig, exit_gracefully)
	main()
	ShiftLightLeds.clear_output()
	Display7Segments.clear_output()
	Retransmit.ss.close()
	TelemetryData.sock.close()
